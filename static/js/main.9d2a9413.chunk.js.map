{"version":3,"sources":["components/Feedback/Statistics/Statistics.module.css","components/Feedback/FeedbackOptions/FeedbackOptions.module.css","components/Container/Container.module.css","components/Feedback/Feedback.module.css","components/Container/Container.jsx","components/Feedback/Statistics/Statistics.jsx","components/Feedback/FeedbackOptions/FeedbackOptions.jsx","components/Feedback/Section/Section.jsx","components/Feedback/Notification/Notification.jsx","components/Feedback/Feedback.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Container","children","className","s","container","Statistics","this","props","good","neutral","bad","total","positivePercentage","text","Component","FeedbackOptions","data","array","key","push","options","onLeaveFeedback","createArray","feedbackDiv","map","el","Object","keys","type","name","onClick","Section","title","Notification","message","Feedback","state","e","target","setState","prevState","callback","Math","round","countTotalFeedback","countPositiveFeedbackPercentage","div","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d2a9413.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Statistics_text__1OaqI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedbackDiv\":\"FeedbackOptions_feedbackDiv__BtCe3\",\"item\":\"FeedbackOptions_item__2PSGu\",\"good\":\"FeedbackOptions_good__3fykS FeedbackOptions_item__2PSGu\",\"neutral\":\"FeedbackOptions_neutral__1wFkI FeedbackOptions_item__2PSGu\",\"bad\":\"FeedbackOptions_bad__xnRdx FeedbackOptions_item__2PSGu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3l_qa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"div\":\"Feedback_div__13CPs\"};","import s from \"./Container.module.css\";\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Container({ children }) {\r\n    return (\r\n        <div className={s.container}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nContainer.propTypes = {\r\n    children: PropTypes.oneOfType([PropTypes.array, PropTypes.object])\r\n}\r\n\r\nexport default Container;","import PropTypes from \"prop-types\";\r\nimport { Component } from \"react\";\r\nimport s from \"./Statistics.module.css\";\r\n\r\nclass Statistics extends Component {\r\n  static propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    total: PropTypes.number,\r\n    positivePercentage: PropTypes.number,\r\n  }\r\n    render() {\r\n        const { good, neutral, bad, total, positivePercentage } = this.props;\r\n      return good + neutral + bad === 0 ? (\r\n        <p className={s.text}>There are no feedbacks yet! Yours could be first!</p>\r\n      ) : (\r\n        <>\r\n          <p className={s.text}>Good: {good}</p>\r\n          <p className={s.text}>Neutral: {neutral}</p>\r\n          <p className={s.text}>Bad: {bad}</p>\r\n          <p className={s.text}>Total: {total}</p>\r\n          <p className={s.text}>\r\n            Positive feedback:\r\n            {positivePercentage}%\r\n          </p>\r\n        </>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Statistics;\r\n","import PropTypes from \"prop-types\";\r\nimport { Component } from \"react\";\r\nimport s from \"./FeedbackOptions.module.css\";\r\n\r\nclass FeedbackOptions extends Component {\r\n  static propTypes = {\r\n    options: PropTypes.objectOf(PropTypes.number),\r\n    onLeaveFeedback: PropTypes.func,\r\n  };\r\n  createArray(data) {\r\n    const array = [];\r\n    for (const key in data) {\r\n      array.push({ [key]: data[key] });\r\n    }\r\n    return array;\r\n  }\r\n  render() {\r\n    const { options, onLeaveFeedback } = this.props;\r\n    const array = this.createArray(options);\r\n    return (\r\n      <div className={s.feedbackDiv}>\r\n        {array.map((el) => {\r\n          const key = Object.keys(el);\r\n          return (\r\n            <button\r\n              type=\"button\"\r\n              name={key}\r\n              onClick={onLeaveFeedback}\r\n              key={key}\r\n              className={s[key]}\r\n            >\r\n              {key}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from \"prop-types\";\r\nimport { Component } from \"react\";\r\nimport s from \"./Section.module.css\";\r\n\r\nclass Section extends Component {\r\n  static propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n  };\r\n  render() {\r\n    const { title, children } = this.props;\r\n    return (\r\n      <section>\r\n        <h2>{title}</h2>\r\n        {children}\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default Section;","import PropTypes from \"prop-types\";\r\nimport { Component } from \"react\";\r\nimport s from \"./Notification.module.css\";\r\n\r\nclass Notification extends Component {\r\n  static propTypes = {\r\n    message: PropTypes.string,\r\n    };\r\n\r\n    render() {\r\n        const { message } = this.props;\r\n        return <p>{message}</p>;\r\n    }\r\n}\r\n\r\nexport default Notification;\r\n","import PropTypes from \"prop-types\";\r\nimport { Component } from \"react\";\r\nimport s from \"./Feedback.module.css\";\r\nimport Statistics from \"./Statistics\";\r\nimport FeedbackOptions from \"./FeedbackOptions\";\r\nimport Section from \"./Section\";\r\nimport Notification from './Notification';\r\n\r\nclass Feedback extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n  static propTypes = {\r\n    good: PropTypes.string,\r\n  };\r\n  countTotalFeedback({ good, neutral, bad }) {\r\n    return good + neutral + bad;\r\n  }\r\n  countPositiveFeedbackPercentage(callback, { good, neutral, bad }) {\r\n    return Math.round((good / callback({ good, neutral, bad })) * 100);\r\n  }\r\n  onLeaveFeedback = (e) => {\r\n    const target = e.target.name;\r\n    this.setState((prevState) => ({\r\n      [target]: prevState[target] + 1,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { state } = this;\r\n    const { good, neutral, bad, total } = this.state;\r\n    const {\r\n      countTotalFeedback,\r\n      countPositiveFeedbackPercentage,\r\n      onLeaveFeedback,\r\n      } = this;\r\n\r\n    return (\r\n      <div className={s.div}>\r\n        <Section title=\"Please leave feedback!\">\r\n          <FeedbackOptions options={state} onLeaveFeedback={onLeaveFeedback} />\r\n        </Section>\r\n\r\n        <Section title=\"Statistics\">\r\n          {countTotalFeedback(state) === 0 ? (\r\n            <Notification message=\"No feedback given\" />\r\n          ) : (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={countTotalFeedback(state)}\r\n              positivePercentage={countPositiveFeedbackPercentage(\r\n                countTotalFeedback,\r\n                state\r\n              )}\r\n            />\r\n          )}\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Feedback;\r\n","import Container from './components/Container';\nimport Feedback from './components/Feedback'\n\nfunction App() {\n  return (\n    <Container>\n      <Feedback />\n    </Container>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}